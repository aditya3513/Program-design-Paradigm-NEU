#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 71 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2609 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 24 29 1 #"\n"
0 0 26 3 7 #"#reader"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"htdp-intermediate-reader.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 24 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 24 3 1 #" "
0 0 14 3 13 #"screensaver-1"
0 0 24 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 24 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 24 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 24 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"screensaver"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 13 #"initial-world"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 16 #"world-after-tick"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 21 #"world-after-key-event"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 11 #"world-circ1"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 11 #"world-circ2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 13 #"world-paused?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"new-circle"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"circ-x"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"circ-y"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"circ-vx"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"circ-vy"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"check-location"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"03\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"screensaver-1.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; screensaver : Integer -> World"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; GIVEN: the speed of stimulation"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; EFFECT: runs the simulation, starting with given speed"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; RETURNS: the final state of the world"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; EXAMPLES : (screensaver 1)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; No test cases have been added as the final state depends"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;     on when the stimulation ends."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"screensaver"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"on-draw"
0 0 24 3 1 #" "
0 0 14 3 14 #"world-to-scene"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; CONSTANTS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-X-C1"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-Y-C1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VX-C1"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VY-C1"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VX-C2"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VY-C2"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-X-C2"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-Y-C2"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"X-LEFT"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"X-RIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"Y-UP"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"Y-DOWN"
0 0 24 3 1 #" "
0 0 21 3 3 #"260"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; dimensions of the canvas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Circle "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;; DATA DEFINITIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"circ"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 2 #"vx"
0 0 24 3 1 #" "
0 0 14 3 2 #"vy"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; A Circ is a (make-circ NonNegInt NonNegInt Int Int)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Interpretation: "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; x is the x co ordinate of the center of the circle."
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; y is the y co ordinate of the center of the circle."
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; vx is the velocity of the center of circle in x direction(a vecto"
 #"r)."
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; vy is the velocity of the center of circle in y direction(a vecto"
 #"r)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; circ-fn : Circ -> ??"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(define (circ-fn c)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";  (... (circ-x c) (circ-y c) (circ-vx c)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";       (circ-vy c)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;examples of worlds, for testing"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 5 #"circ1"
0 0 24 3 1 #" "
0 0 14 3 5 #"circ2"
0 0 24 3 1 #" "
0 0 14 3 7 #"paused?"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; A WorldState or World is a (make-world Circ Circ Boolean)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Interpretation: "
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Circ is the struct Circ as described above."
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; paused? describes whether or not the screensaver is paused."
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;   describes the   of stimulation in seconds/tick."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; world-fn : World -> ??"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(define (world-fn w)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";  (... (world-circ1 w) (world-circ2 w) (world-paused? w) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;examples of worldstate, for testing"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"unpaused-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 6 #"  ))  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"paused-world"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; help function for key event"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; is-pause-key-event? : KeyEvent -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; GIVEN: a KeyEvent"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: true iff the KeyEvent represents a pause instruction"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"is-pause-key-event?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; examples for testing"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"pause-key-event"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"non-pause-key-event"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 24 3 4 #")   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; initial-world : Any -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN: any value (ignored)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; RETURNS: the initial world specified in the problem set"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; EXAMPLES: See test cases"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: combining simpler functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"initial-circle1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 15 #"initial-circle2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"paused-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 61
#"\"Initial state should be equal to paused state as mentioned.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; world-after-tick : WorldState -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; GIVEN: a worldstate w"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; RETURNS: the worldstate that should follow w after a tick."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; EXAMPLES: "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; moving around state:"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; (world-after-tick unpaused-world) = unpaused-world"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; paused state:"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; (world-after-tick paused-world) = paused-world"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: Use template for World on w"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"world-paused?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"w"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"process-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 14 #"unpaused-world"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"188"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"223"
0 0 24 3 1 #" "
0 0 21 3 3 #"186"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 44 #"\"in unpaused world, circles can move around\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 12 #"paused-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"paused-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 38 #"\"in paused world, circles cannot move\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; world-after-key-event : World KeyEvent -> World"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; GIVEN: a world w and a keyevent kev"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; RETURNS: the world that should follow the given world"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; after the given key event."
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; on space, toggle paused?-- ignore all others"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; EXAMPLES: see tests below"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; STRATEGY: Cases on whether the key is a pause event"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"is-pause-key-event?"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"world-with-paused-toggled"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; world-with-paused-toggled : World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURNS: a world just like the given one, but with paused? toggle"
 #"d"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: Use template for World on w"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"world-with-paused-toggled"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 13 #"world-paused?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; for world-after-key-event, we need 4 tests: a paused world, and a"
 #"n"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";; unpaused world, and a pause-key-event and a non-pause key event."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 12 #"paused-world"
0 0 24 3 1 #" "
0 0 14 3 15 #"pause-key-event"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 14 #"unpaused-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 56
#"\"after pause key, a paused world should become unpaused\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 14 #"unpaused-world"
0 0 24 3 1 #" "
0 0 14 3 15 #"pause-key-event"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"paused-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 57
#"\"after pause key, an unpaused world should become paused\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 12 #"paused-world"
0 0 24 3 1 #" "
0 0 14 3 19 #"non-pause-key-event"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"paused-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 59
#"\"after a non-pause key, a paused world should be unchanged\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 14 #"unpaused-world"
0 0 24 3 1 #" "
0 0 14 3 19 #"non-pause-key-event"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 14 #"unpaused-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 62
#"\"after a non-pause key, an unpaused world should be unchanged\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; new-circle : NonNegInt NonNegInt Int Int -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; GIVEN: 2 non-negative integers x and y, and 2 integers vx and vy"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; RETURNS: a circle centered at (x,y), which will travel with"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; velocity (vx, vy)."
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; EXAMPLE:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; (new-circ 10 20 -3 -5) = (make-circ 10 20 -3 -5)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; STRATEGY: Create new circle using make-circ"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 2 #"vx"
0 0 24 3 1 #" "
0 0 14 3 2 #"vy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 2 #"vx"
0 0 24 3 1 #" "
0 0 14 3 2 #"vy"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; TESTS:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 57
#"\"It should make a circle with x, y, vx, vy as 10,20,-3,-5"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"     respectively.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";; FOR TESTING PURPOSES :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"C1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"370"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 3 #")) "
0 0 17 3 29 #";; moves out of right boundry"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"C2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"-20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 3 #")) "
0 0 17 3 28 #";; moves out of left boundry"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"C3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 3 #")) "
0 0 17 3 29 #";; moves out of upper boundry"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"C4"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"280"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 17 3 29 #";; moves out of lower boundry"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; HELPER FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; initial-circle1 : Any -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; GIVEN: Initial specification about position and velocity of circl"
 #"e 1"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; RETURNS: a circle centered at (200,100), which will travel with"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; velocity (-12, 20)."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; STRATEGY: Create new circle using make-circ with initial values."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"initial-circle1"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-X-C1"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-Y-C1"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VX-C1"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 13 #"INITIAL-VY-C1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; TEST :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"initial-circle1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-X-C1"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-Y-C1"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VX-C1"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 13 #"INITIAL-VY-C1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 60
#"\"It should make a circle with x, y, vx, vy as 200,100,-12,20"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"     respectively.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; initial-circle2 : Any -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; GIVEN: Initial specification about position and velocity of circl"
 #"e 2"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; RETURNS: a circle centered at (200,200), which will travel with"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; velocity (23, -14)."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; STRATEGY: Create new circle using make-circ with initial values."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"initial-circle2"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-X-C2"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-Y-C2"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VX-C2"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 13 #"INITIAL-VY-C2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; TEST :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"initial-circle2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-X-C2"
0 0 24 3 1 #" "
0 0 14 3 12 #"INITIAL-Y-C2"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-VX-C2"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 13 #"INITIAL-VY-C2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 60
#"\"It should make a circle with x, y, vx, vy as 200,200,23,-14"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"     respectively.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; next-point-x : Circ -> Int"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; RETURNS: Next X co-ordinate of the circle."
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; EXAMPLE: (next-point-x (make-circ 10 20 -1 2)) = 9"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; TESTS:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"It should return 9.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 2 #") "
0 0 21 3 3 #"223"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"It should return 223.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; next-point-y : Circ -> Int"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; RETURNS: Next Y co-ordinate of the circle."
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; EXAMPLE: (next-point-y (make-circ 10 20 -1 2)) = 22"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; TESTS:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"It should return 22.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 2 #") "
0 0 21 3 3 #"186"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"It should return 186.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; adjust-right : Circ -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: circle which remains within right hand side boundry."
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; EXAMPLE: (adjust-left-value (make-circ 360 20 20 2)) = 20"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"adjust-right"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 7 #"X-RIGHT"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"adjust-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"C2"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 19 3 29 #"\"check for case right-adjust\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; adjust-left : Circ -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; RETURNS: circle which remains within left hand side boundry."
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; EXAMPLE: (adjust-left (make-circ 360 20 20 2)) = 20"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"adjust-left"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 14 3 6 #"X-LEFT"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"adjust-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"C1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"-20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 19 3 28 #"\"check for case left-adjust\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; adjust-up : Circ -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: circle which remains within upper hand side boundry."
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; EXAMPLE: (adjust-up (make-circ 360 20 20 2)) = 20"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"adjust-up"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 2 #") "
0 0 14 3 4 #"Y-UP"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"adjust-up"
0 0 24 3 1 #" "
0 0 14 3 2 #"C4"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 19 3 26 #"\"check for case adjust-up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; adjust-down : Circ -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; RETURNS: circle which remains within down side boundry."
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; EXAMPLE: (adjust-down (make-circ 360 20 20 2)) = 20"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"adjust-down"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 2 #") "
0 0 14 3 6 #"Y-DOWN"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"adjust-down"
0 0 24 3 1 #" "
0 0 14 3 2 #"C3"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 1 #" "
0 0 21 3 3 #"260"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 19 3 23 #"\"check for adjust-down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; adjust : Circ -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: A circ (refer data definations)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; RETURNS: circle which remains within boundry"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;          (used when not hitting any corner)."
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; EXAMPLE: (adjust (make-circ circle1)) ="
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;     (make-circ 188 120 -12 20)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; STRATEGY: combining simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"adjust"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 3 #") ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 3 #") ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cir"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"adjust"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"188"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #") "
0 0 19 3 24 #"\"returns 188 120 -12 20\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #";; move-circle : Circ -> Circ"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: Circ i.e a circle"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: a circle centered with its updated next position and"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;          updated velocities."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; STRATEGY: divide into cases on basis of where a bounce occurs."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-circle"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 6 #"RADIUS"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 11 #"adjust-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 6 #"RADIUS"
0 0 24 3 2 #") "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 3 #") ("
0 0 14 3 12 #"adjust-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 6 #"RADIUS"
0 0 24 3 2 #") "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 3 #") ("
0 0 14 3 11 #"adjust-down"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 12 #"next-point-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 6 #"RADIUS"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"adjust-up"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"adjust"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"move-circle"
0 0 24 3 1 #" "
0 0 14 3 2 #"C1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"-20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 19 3 21 #"\"check for case left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"move-circle"
0 0 24 3 1 #" "
0 0 14 3 2 #"C2"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 19 3 22 #"\"check for case right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"move-circle"
0 0 24 3 1 #" "
0 0 14 3 2 #"C3"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 19 3 21 #"\"check for case down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"move-circle"
0 0 24 3 1 #" "
0 0 14 3 2 #"C4"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 1 #" "
0 0 21 3 3 #"260"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 19 3 19 #"\"check for case up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"move-circle"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"188"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #") "
0 0 19 3 21 #"\"check for else case\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; process-world : World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; GIVEN: WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; RETURNS: A WorldState with updates in both circles."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: combinig simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"process-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-circle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"move-circle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"false"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"W1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"188"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 21 3 3 #"223"
0 0 24 3 1 #" "
0 0 21 3 3 #"186"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"process-world"
0 0 24 3 1 #" "
0 0 14 3 14 #"unpaused-world"
0 0 24 3 2 #") "
0 0 14 3 2 #"W1"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"It should return W1 WorldState.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; world-C-x : Circ -> Int"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; GIVEN: Circ"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; RETURNS: Integer indicating the x co ordinate of the circle."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: combinig simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-C-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"world-C-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 2 #") "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"It should return 200.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"world-C-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 2 #") "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"It should return 200.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; world-C-y : Circ -> Int"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; GIVEN: Circ"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; RETURNS: Integer indicating the y co ordinate of the circle."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: combinig simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-C-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"world-C-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"It should return 100.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"world-C-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 2 #") "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"It should return 200.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; get-world-scene-help : World -> Scene"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; GIVEN: WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; RETURNS: Image of circle on an empty scene (helper to world-to-sc"
 #"ene)"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: See test case"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: combinig simpler functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"get-world-scene-help"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 8 #"overlay2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))  ("
0 0 14 3 9 #"world-C-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"world-C-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"TEST_IMAGE1"
0 0 24 3 1 #" "
0 6           4 60 1620
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struct:p"
 #"oint 400 300) #(struct:point 0 300)) #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:trans"
 #"late 180.5 200.0 #(struct:text \"(\" 0 1 \"blue\" 12 #f swiss normal"
 #" normal #f)) #(struct:translate 186.0 200.0 #(struct:text \"2\" 0 1 "
 #"\"blue\" 12 #f swiss normal normal #f))) #(struct:translate 193.0 20"
 #"0.0 #(struct:text \"3\" 0 1 \"blue\" 12 #f swiss normal normal #f)))"
 #" #(struct:translate 198.0 200.0 #(struct:text \",\" 0 1 \"blue\" 12 "
 #"#f swiss normal normal #f))) #(struct:translate 201.5 200.0 #(struct"
 #":text \"-\" 0 1 \"blue\" 12 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 207.0 200.0 #(struct:text \"1\" 0 1 \"blue\" 12 #f swiss nor"
 #"mal normal #f))) #(struct:translate 214.0 200.0 #(struct:text \"4\" "
 #"0 1 \"blue\" 12 #f swiss normal normal #f))) #(struct:translate 219."
 #"5 200.0 #(struct:text \")\" 0 1 \"blue\" 12 #f swiss normal normal #"
 #"f))) #(struct:translate 200.0 200.0 #(struct:ellipse 80 80 0 outline"
 #" \"blue\"))) #(struct:crop (#(struct:point 0 0) #(struct:point 400 0"
 #") #(struct:point 400 300) #(struct:point 0 300)) #(struct:overlay #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 400 0 0 0) #(struct:pulled-point 0 0 400 300 0 0) #(struct:"
 #"pulled-point 0 0 0 300 0 0)) outline #(struct:pen \"black\" 2 solid "
 #"round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 400 0 0 0) #(struct:pulled-point 0 0 400 30"
 #"0 0 0) #(struct:pulled-point 0 0 0 300 0 0)) 255 \"white\"))))) #(st"
 #"ruct:bb 400 300 300.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"get-world-scene-help"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")) "
0 0 14 3 11 #"TEST_IMAGE1"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"It should return above image.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; world-to-scene : World -> Scene"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; RETURNS: a Scene that portrays the given world."
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; EXAMPLE: (world-to-scene (make-world circle1 circle2 true)) ="
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;       "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; STRATEGY: Use template for World on w"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-to-scene"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 8 #"overlay1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"world-C-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"world-C-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 20 #"get-world-scene-help"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"TEST_IMAGE2"
0 0 24 3 1 #" "
0 6           4 60 2688
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struct:p"
 #"oint 400 300) #(struct:point 0 300)) #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:trans"
 #"late 180.5 100.0 #(struct:text \"(\" 0 1 \"blue\" 12 #f swiss normal"
 #" normal #f)) #(struct:translate 184.5 100.0 #(struct:text \"-\" 0 1 "
 #"\"blue\" 12 #f swiss normal normal #f))) #(struct:translate 190.0 10"
 #"0.0 #(struct:text \"1\" 0 1 \"blue\" 12 #f swiss normal normal #f)))"
 #" #(struct:translate 197.0 100.0 #(struct:text \"2\" 0 1 \"blue\" 12 "
 #"#f swiss normal normal #f))) #(struct:translate 202.0 100.0 #(struct"
 #":text \",\" 0 1 \"blue\" 12 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 207.0 100.0 #(struct:text \"2\" 0 1 \"blue\" 12 #f swiss nor"
 #"mal normal #f))) #(struct:translate 214.0 100.0 #(struct:text \"0\" "
 #"0 1 \"blue\" 12 #f swiss normal normal #f))) #(struct:translate 219."
 #"5 100.0 #(struct:text \")\" 0 1 \"blue\" 12 #f swiss normal normal #"
 #"f))) #(struct:translate 200.0 100.0 #(struct:ellipse 80 80 0 outline"
 #" \"blue\"))) #(struct:crop (#(struct:point 0 0) #(struct:point 400 0"
 #") #(struct:point 400 300) #(struct:point 0 300)) #(struct:overlay #("
 #"struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #("
 #"struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #("
 #"struct:translate 180.5 200.0 #(struct:text \"(\" 0 1 \"blue\" 12 #f "
 #"swiss normal normal #f)) #(struct:translate 186.0 200.0 #(struct:tex"
 #"t \"2\" 0 1 \"blue\" 12 #f swiss normal normal #f))) #(struct:transl"
 #"ate 193.0 200.0 #(struct:text \"3\" 0 1 \"blue\" 12 #f swiss normal "
 #"normal #f))) #(struct:translate 198.0 200.0 #(struct:text \",\" 0 1 "
 #"\"blue\" 12 #f swiss normal normal #f))) #(struct:translate 201.5 20"
 #"0.0 #(struct:text \"-\" 0 1 \"blue\" 12 #f swiss normal normal #f)))"
 #" #(struct:translate 207.0 200.0 #(struct:text \"1\" 0 1 \"blue\" 12 "
 #"#f swiss normal normal #f))) #(struct:translate 214.0 200.0 #(struct"
 #":text \"4\" 0 1 \"blue\" 12 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 219.5 200.0 #(struct:text \")\" 0 1 \"blue\" 12 #f swiss nor"
 #"mal normal #f))) #(struct:translate 200.0 200.0 #(struct:ellipse 80 "
 #"80 0 outline \"blue\"))) #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 400 0) #(struct:point 400 300) #(struct:point 0 300)) #(struc"
 #"t:overlay #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(str"
 #"uct:pulled-point 0 0 400 0 0 0) #(struct:pulled-point 0 0 400 300 0 "
 #"0) #(struct:pulled-point 0 0 0 300 0 0)) outline #(struct:pen \"blac"
 #"k\" 2 solid round round)) #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 400 0 0 0) #(struct:pulled-poin"
 #"t 0 0 400 300 0 0) #(struct:pulled-point 0 0 0 300 0 0)) 255 \"white"
 #"\"))))))) #(struct:bb 400 300 300.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"world-to-scene"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")) "
0 0 14 3 11 #"TEST_IMAGE2"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"It should return above image.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; set-string : Circle -> String"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN : A Circ [ a circle]"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; RETURNS: String showing co ordinates or the center."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: see test case"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;       "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; STRATEGY: combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"set-string"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"set-string"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 2 #") "
0 0 19 3 10 #"\"(-12,20)\""
0 0 24 3 1 #" "
0 0 19 3 29 #"\"check for vector to string.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Text-getter : Circle -> String"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN : A Circ [ a circle]"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; RETURNS: String showing co ordinates or the center."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: see test case"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;       "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; STRATEGY: combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Text-getter"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 10 #"set-string"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"Text-getter"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"(-12,20)\""
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 25 #"String to Text function.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; overlay1 : Circle -> Scene"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN : A Circ [ a circle]"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; RETURNS: a scene with first circles at xy position."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: see test case"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;       "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; STRATEGY: combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"overlay1"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Text-getter"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"overlay1"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle1"
0 0 24 3 2 #") "
0 6           4 60 1362
(
 #"(#(struct:overlay #(struct:translate 18.5 34.0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 2.0 6.0 #(struct:text \"(\" 0 1 \"blue\" 12 #f swiss normal no"
 #"rmal #f))) #(struct:translate 4.0 0.0 #(struct:translate 2.0 6.0 #(s"
 #"truct:text \"-\" 0 1 \"blue\" 12 #f swiss normal normal #f))))) #(st"
 #"ruct:translate 8.0 0.0 #(struct:t"
 #"ranslate 3.5 6.0 #(struct:text \"1\" 0 1 \"blue\" 12 #f swiss normal"
 #" normal #f))))) #(struct:translate 15.0 0.0 #(struct:translate 3.5 6"
 #".0 #(struct:text \"2\" 0 1 \"blue\" 12 #f swiss normal normal #f))))"
 #") #(struct:translate 22.0 0.0 #(struct:translate 1.5 6.0 #(struct:te"
 #"xt \",\" 0 1 \"blue\" 12 #f swiss normal normal #f))))) #(struct:tra"
 #"nslate 25.0 0.0 #(struct:translat"
 #"e 3.5 6.0 #(struct:text \"2\" 0 1 \"blue\" 12 #f swiss normal normal"
 #" #f))))) #(struct:translate 32.0 0.0 #(struct:translate 3.5 6.0 #(st"
 #"ruct:text \"0\" 0 1 \"blue\" 12 #f swiss normal normal #f))))) #(str"
 #"uct:translate 39.0 0.0 #(struct:t"
 #"ranslate 2.0 6.0 #(struct:text \")\" 0 1 \"blue\" 12 #f swiss normal"
 #" normal #f))))) #(struct:translate 0 0 #(struct:translate 40 40 #(st"
 #"ruct:ellipse 80 80 0 outline \"blue\")))) #(struct:bb 80.0 80.0 80.0"
 #") #f)"
) 0 0 24 3 1 #" "
0 0 19 3 15 #"\"first overlay\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; overlay2 : Circle -> Scene"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN : A Circ [ a circle]"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; RETURNS: a scene with second circle at xy position."
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; EXAMPLE: see test case"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;       "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; STRATEGY: combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"overlay2"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Text-getter"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; TESTS :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"overlay2"
0 0 24 3 1 #" "
0 0 14 3 7 #"circle2"
0 0 24 3 2 #") "
0 6           4 60 1363
(
 #"(#(struct:overlay #(struct:translate 18.5 34.0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 2.0 6.0 #(struct:text \"(\" 0 1 \"blue\" 12 #f swiss normal no"
 #"rmal #f))) #(struct:translate 4.0 0.0 #(struct:translate 3.5 6.0 #(s"
 #"truct:text \"2\" 0 1 \"blue\" 12 #f swiss normal normal #f))))) #(st"
 #"ruct:translate 11.0 0.0 #(struct:translate 3.5 6.0 #(struct:text \"3"
 #"\" 0 1 \"blue\" 12 #f swiss normal normal #f))))) #(struct:translate"
 #" 18.0 0.0 #(struct:translate 1.5"
 #" 6.0 #(struct:text \",\" 0 1 \"blue\" 12 #f swiss normal normal #f))"
 #"))) #(struct:translate 21.0 0.0 #(struct:translate 2.0 6.0 #(struct:"
 #"text \"-\" 0 1 \"blue\" 12 #f swiss normal normal #f))))) #(struct:t"
 #"ranslate 25.0 0.0 #(struct:translate 3.5 6.0 #(struct:text \"1\" 0 1"
 #" \"blue\" 12 #f swiss normal normal #f))))) #(struct:translate 32.0 "
 #"0.0 #(struct:translate 3.5 6.0 #(struct:text \"4\" 0 1 \"blue\" 12 #"
 #"f swiss normal normal #f))))) #(struct:translate 39.0 0.0 #(struct:t"
 #"ranslate 2.0 6.0 #(struct:text \")\" 0 1 \"blue\" 12 #f swiss normal"
 #" normal #f))))) #(struct:translate 0 0 #(struct:translate 40 40 #(st"
 #"ruct:ellipse 80 80 0 outline \"blue\")))) #(struct:bb 80.0 80.0 80.0"
 #") #f)"
) 0 0 24 3 1 #" "
0 0 19 3 16 #"\"second overlay\""
0 0 24 3 2 #"))"
0           0
