;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname q1) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require rackunit)
(require "extras.rkt")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A Program is a ListOfDefinition.

(define-struct def (name args body))
;; A Definition is a (make-def Variable ListOfVariable Exp)
;; INTERPRETATION:
;; name is the name of the function being defined
;; args is the list of arguments of the function
;; body is the body of the function.

(define-struct varexp (name))
(define-struct appexp (fn args))

;; An Exp is one of
;; -- (make-varexp Variable)
;; -- (make-appexp Variable ListOfExp)
;; INTERPRETATION;
;; (make-varexp v)                   represents a use of the variable v
;; (make-appexp f (list e1 ... en))  represents a call to the function
;;                                   named f, with arguments e1,..,en

;; A Variable is a Symbol.

(define-struct tree(node children))
;; A Tree is a (make-tree Symbol ListOfSymbol)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define some-loops
  (list
     (make-def 'f1 (list 'x) (make-appexp 'no-loop (list (make-varexp 'x))))
     (make-def 'f2 (list 'u 'y) (make-appexp 'f1 (list (make-varexp 'y))))
     (make-def 'f3 (list 'x 'u)
               (make-appexp 'f1 (list (make-appexp 'f4
                                             (list (make-varexp 'u)
                                                   (make-varexp 'w)))
                                      (make-varexp 'z))))
     (make-def 'f4 (list 'x 'y)
               (make-appexp 'f5
                            (list (make-varexp 'y)
                                  (make-varexp 'u))))
     (make-def 'f5 (list 'u)
               (make-appexp 'f6
                            (list (make-appexp 'f1 empty))))
     (make-def 'f6 (list 'u)
               (make-appexp 'f4
                            (list (make-appexp 'f3 empty))))
     (make-def 'no-loop (list 'x) (make-varexp 'x))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; make-stress-input-without-loops : PosInt -> Program
;;; GIVEN: an integer n
;;; RETURNS: an SGS program with no loops that defines n functions
;;; EXAMPLES:
;;;     (make-stress-input-without-loops 1)
;;;  => (list
;;;      (make-def 'f1 (list 'x 'y) (make-varexp 'x)))
;;;
;;;     (make-stress-input-without-loops 3)
;;;  => (list
;;;      (make-def 'f1 (list 'x 'y) (make-varexp 'x))
;;;      (make-def 'f2 (list 'x 'y)
;;;        (make-appexp 'f1 (list (make-varexp 'x) (make-varexp 'x))))
;;;      (make-def 'f3 (list 'x 'y)
;;;        (make-appexp
;;;         'f2
;;;         (make-appexp 'f2 (list (make-varexp 'x) (make-varexp 'x)))
;;;         (make-appexp 'f2 (list (make-varexp 'x) (make-varexp 'x))))))

(define (make-stress-input-without-loops n)
  (local (
          ;;; Returns a list of 1 through k.
          (define (iota k)
            (reverse (reverse-iota k)))
          (define (reverse-iota k)
            (if (= k 0)
                empty
                (cons k (reverse-iota (- k 1)))))

          ;;; Given the function names in reverse order,
          ;;; returns their bodies in reverse order.
          (define (make-bodies names)
            (if (empty? (rest names))
                (list (make-varexp 'x))
                (let* ((bodies (make-bodies (rest names)))
                       (body (first bodies))
                       (name (first (rest names))))
                  (cons (make-appexp name (list body body))
                        bodies)))))
    (let* ((nums (iota n))
           (syms (map (lambda (k)
                        (string->symbol (string-append "f"
                                                       (number->string k))))
                      nums))
           (bodies (reverse (make-bodies (reverse syms)))))
      (map (lambda (sym body)
             (make-def sym (list 'x 'y) body))
           syms
           bodies))))

;;; stress-benchmark1 : PosInt -> Boolean
;;; GIVEN: a positive integer n
;;; RETURNS: false
;;; EFFECT: reports how many milliseconds it takes to determine
;;;     (make-stress-input-without-loops n) has no loops

(define (stress-benchmark1 n)
  (time (any-loops? (make-stress-input-without-loops n))))




;; any-loops? : Program -> Boolean
;; GIVEN: a valid SGS program p (that is, a GS program that obeys the
;;        restrictions listed above).
;; RETURNS: true iff there is some function f in p that calls itself
;; either directly or indirectly, as in the example above.
(define (any-loops? program)
  (ormap
   (lambda (d) (exist-loop-of-def? d program))
   program))


;; exist-loop-of-def? : Definition Program -> Boolean
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (exist-loop-of-def? def program)
  (exist-same-function-in-children
   (tree-children (get-call-tree-of-def def program 0))
   (def-name def)))


;; exist-same-function-in-children : ListOfTree Symbol -> Boolean
;; GIVEN: A
;; RETURN:
;; EXAMPLES:
;; HALTING MEASURE: length of children
;; DESIGN STRATEGY: use HOF ormap on children
(define (exist-same-function-in-children children fn)
  (ormap
   (lambda (t) (exist-same-function-in-tree t fn))
   children))


;; exist-same-function-in-tree : Tree Symbol -> Boolean
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY: use template of tree
(define (exist-same-function-in-tree tree fn)
  (cond
    [(empty? tree) #f]
    [(equal? (tree-node tree) fn) #t]
    [else (exist-same-function-in-children (tree-children tree) fn)]))
  


;; get-call-tree-of-def : Definition Program NonNegInt -> Tree
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (get-call-tree-of-def def program depth)
  (cond
    [(or (empty? def)
         (> depth (length program)))
     empty]
    [else
     (make-tree (def-name def)
                (get-tree-children-of-exp (def-body def) program (+ depth 1)))]))



;; : ->
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (get-tree-children-of-exp exp program depth)
  (cond
    [(varexp? exp) empty]
    [else (get-call-tree-lst-of-los
           (get-all-function-called exp) program depth)]))



;; : ->
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (get-call-tree-lst-of-los los program depth)
  (cond
    [(empty? los) empty]
    [else (cons (get-call-tree-of-def (get-def-with-name (first los) program)
                                      program depth)
                (get-call-tree-lst-of-los (rest los) program depth))]))



;; : ->
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (get-all-function-called appexp)
  (cons (appexp-fn appexp)
        (get-functions-in-loe (appexp-args appexp))))



;; : ->
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (get-functions-in-loe args)
  (cond
    [(empty? args) empty]
    [(varexp? (first args))
     (get-functions-in-loe (rest args))]
    [else
     (cons (appexp-fn (first args))
           (get-functions-in-loe (rest args)))]))



;; : ->
;; GIVEN:
;; RETURN:
;; EXAMPLES:
;; DESIGN STRATEGY:
(define (get-def-with-name name program)
  (cond
    [(empty? program) empty]
    [(equal? name (def-name (first program)))
     (first program)]
    [else (get-def-with-name name (rest program))]))


