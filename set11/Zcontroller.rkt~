#lang racket

;; displays as an outline rectangle with text showing the x
;; coordinate and velocity of the particle.

;; the rectangle is draggable

;; +,- increments or decrements the speed of the particle

(require 2htdp/image)
(require 2htdp/universe)
(require "interfaces.rkt")
(require "PerfectBounce.rkt")

(provide make-y-controller)


(define RED-CIRCLE (circle 10 "solid" "red"))
(define BLACK-DOT (circle 2 "solid" "black"))
(define BALL (overlay/align "middle" "middle" BLACK-DOT RED-CIRCLE))

;; make-velocity-controller : Model -> Controller
;; GIVEN: a model m
;; RETURNS: A velocity controller for m

(define (make-y-controller m)
  (new YController% [model m]))


;; Constructor template for VelocityController%
;; (new VelocityController% [model Model])

(define YController%
  (class* object% (Controller<%>)
    
    (init-field model)  ; the model
    
    ; Position of the center of the controller
    ; both of these are NonNegInts.
    (init-field [x 100] [y 100])   
    
    ; width and height of the controller.  Both PosInts.
    (init-field [width 50][height 100])
    
    (field [half-width  (/ width  2)])
    (field [half-height (/ height 2)])
    (field [center-x 75])
    (field [center-y 50])
    
    ;; controller's cache of the position and velocity of the
    ;; particle.
    ;; both Reals.
    (field [x-particle 0])
    (field [y-particle y])
    (field [vx-particle 0])
    (field [vy-particle 0])
    
    
    ;; fields for dragging
    ;; if selected? then position of last button-down relative to
    ;; center of viewer; else any value
    (field [selected? false])
    (field [saved-mx 0])
    (field [saved-my 0])
    
    (super-new)
    
    ;; at initialization, register this controller with the model
    (send model register this)


    ;; sum-square : PosInt PosInt -> PosInt
    ;; GIVEN: values of x and y
    ;; RETURNS: the square of the difference between x and y
    ;; EXAMPLES: (sum-square 3 5) => 4
    ;; STRATEGY: Combine simpler functions
    (define (sum-square z1 z2)
      (sqr (- z1 z2)))

    ;; distance : PosInt PosInt PosInt PosInt -> PosReal
    ;; GIVEN: two points in the plane
    ;; RETURNS: the distance between the points
    ;; EXAMPLES: (distance 4 3 7 7) => 5
    ;; STRATEGY: Combine simpler functions
    (define (distance)
      (sqrt (sum-square y-particle center-y)))

    
    
    ;; Signal -> Void
    ;; decodes signal and updates local data
    (define/public (receive-signal sig)
      (cond
        [(report-position-y? sig)
         (set! y-particle (report-position-y-pos sig))]
        [(report-velocity-y? sig)
         (set! vy-particle (report-velocity-y-v sig))]
        [else this]))
    
    ; after-button-down : Integer Integer -> Void
    ; GIVEN: the location of a button-down event
    ; EFFECT: makes the viewer selected
    ; The viewer stays selected until a button down somewhere else
    ; STRATEGY: Cases on whether the event is in this object
    (define/public (after-button-down mx my)
      (if (in-this? mx my)
          (begin
            (set! selected? true)
            (set! saved-mx (- mx x))
            (set! saved-my (- my y)))
          (set! selected? false)))
    
    ; after-button-up : Integer Integer -> Void
    ; GIVEN: the (x,y) location of a button-up event
    ; EFFECT: makes this unselected
    
    (define/public (after-button-up mx my) 'ignored)
    
    
    ; after-drag : Integer Integer -> Void
    ; GIVEN: the location of a drag event
    ; STRATEGY: Cases on whether this is selected.
    ; If it is selected, move it so that the vector from its position to
    ; the drag event is equal to saved-mx.  Report the new position to
    ; the registered balls.
    
    (define/public (after-drag mx my)
      (if selected?
          (begin
            (set! x (- mx saved-mx))
            (set! y (- my saved-my)))
          'velocity-controller-after-drag-value))
    
    ;; the velocity controller doesn't respond to mouse move events
    (define/public (after-move mx my)
      'velocity-controller-after-move-value)
    
    ;; Int Int -> Boolean
    (define (in-this? other-x other-y)
      (and
       (and (> other-x (- 10 (- x half-width))) (< other-x (- x half-width)))
       (and (> other-y (- y half-height)) (< other-y (+ 10 (- y half-height))))))
    
    ;; add-to-scene : Scene -> Scene
    ;; RETURNS: a scene like the given one, but with this wall painted
    ;; on it.
    ;; STRATEGY: place the image centered at x y
    
    (define/public (add-to-scene scene)
      (let ((scene (place-image (get-box-image) x y scene)))
        (if (>= y-particle 50)
            (place-image BALL x (- y (distance)) scene)
            (place-image BALL x (+ y (distance)) scene))))
    
    ;; the controller doesn't respond to ticks
    (define/public (after-tick)
      'velocity-controller-after-tick-value)
    
    ;; KeyEvent -> Void
    ;; ignores the key events
    (define/public (after-key-event kev)
      this)
    
 
   

    ;; : -> Image
    (define (get-box-image)
      (let ((S (rectangle width height "outline" "blue"))
        (B (rectangle (+ 30 width) height "outline" (current-color)))
        (H (rectangle 10 10 "outline" "black")))
        (overlay/align "left" "top" 
         H (overlay S B))))

    
    
    
    (define (current-color)
      (if selected? "red" "black"))
    
    (define/public (for-test:select)
      (set! selected? true))
    
    ))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

